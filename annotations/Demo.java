package annotations;

@Deprecated
class A {
    public void showTheDataWhichBelongsToThisClass() {
        System.out.println("In A");
    }
}

class B extends A {
    @Override
    public void showTheDataWhichBelongsToThisClass() {
        System.out.println("In B");
    }
}

public class Demo {
    public static void main(String[] args) {
        B obj = new B();
        obj.showTheDataWhichBelongsToThisClass();

    }
}


/*
 * Bug is a problem in the code that causes the code to behave in an unexpected way.
 * annotations are used to provide metadata to the code.
 * @Deprecated annotation is used to inform the compiler that the method, class, or field is deprecated and should no longer be used.
 * The compiler will generate a warning whenever a deprecated method is used.
 * The @Override annotation is used to inform the compiler that the element is meant to override a method in a superclass.
 * If a method marked with @Override fails to correctly override a method in one of its superclasses, the compiler generates an error.
 * The @SuppressWarnings annotation is used to suppress warnings generated by the compiler.
 * The @SuppressWarnings annotation can be applied to a method, a field, a class, or a variable.
 * The @SuppressWarnings annotation can take one or more arguments that specify the warnings that should be suppressed.
 * The @SuppressWarnings annotation can also take the "all" argument to suppress all warnings.
 * The @SuppressWarnings annotation can also take the "unchecked" argument to suppress warnings generated by unchecked operations.
 * The @SuppressWarnings annotation can also take the "deprecation" argument to suppress warnings generated by the use of deprecated methods.
 *
 * */